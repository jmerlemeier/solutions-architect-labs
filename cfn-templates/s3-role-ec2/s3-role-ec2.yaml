AWSTemplateFormatVersion: 2010-09-09
Description: Creates public/private instances and SGs within a pre-built VPC.

# ----------------- TO DO ----------------------

# [x] 2 EC2 instances- public jumpbox, and private webserver. 
# [x] use USER DATA on the private instance
# [ ] use cfn-init on the private instance
# [x] Create IAM role for EC2
# [x] Create EC2 instance profile for private instance
# [x] Test - should see file from bucket on EBS Vol

# stretch goal: parameters file which you can use to pass the subnet ids for the EC2 instances


Resources:
# ----------------- INSTANCES ----------------------
  PublicInstance: 
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t3.micro
      ImageId: ami-0ce21b51cb31a48b8 # constant
      KeyName: MyUSWest2KP
      SubnetId: subnet-0cadcf79b0e56284f # public subnet hardcoded from AWS
      Tags: 
        - Key: Name
          Value: cfn-public-instance
      SecurityGroupIds:
        - !Ref SecurityGroupPublic

  PrivateInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t3.micro
      ImageId: ami-0ce21b51cb31a48b8 
      KeyName: MyUSWest2KP
      SubnetId: subnet-0e5cf9a76296106e4 # private subnet hardcoded from AWS
      IamInstanceProfile: !Ref InstanceProfile #Allows downloading from S3
      # UserData: 
      #   Fn::Base64: !Sub |  # hardcoded command from info from AWS S3 bucket already created. 
      #     #! /usr/bin/env bash
      #     aws s3 cp s3://files4ec2access/jetsonsKitchen.jpg /home/ec2-user/jetsonsKitchen.jpg 
      Tags:
        - Key: Name
          Value: cfn-private-instance
      SecurityGroupIds:
        - !Ref SecurityGroupPrivate 

# ----------------- PUBLIC Security Group CREATION and RULES ----------------------
  SecurityGroupPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: public-security-group
      GroupDescription: An SG that holds a public instance.
      VpcId: vpc-03e32f396ed45c393 # hardcoded from AWS
      Tags: 
        - Key: Name
          Value: sg-public

  SecurityGroupPublicIngressRuleSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupPublic
      IpProtocol: tcp 
      FromPort: 22
      ToPort: 22
      CidrIp: 24.18.21.111/32 # My, Julie E's, IP

# ----------------- PRIVATE Security Group CREATION and RULES ----------------------
  SecurityGroupPrivate:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: private-security-group
      GroupDescription: An SG that holds a private instance.
      VpcId: vpc-03e32f396ed45c393 # hardcoded from AWS
      Tags: 
        - Key: Name
          Value: sg-private
      
  SecurityGroupPrivateIngressRuleSSH:
    Type: AWS::EC2::SecurityGroupIngress 
    Properties:
      GroupId: !Ref SecurityGroupPrivate
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt SecurityGroupPublic.GroupId # lookup why

# ----------------- IAM ROLE FOR EC2 ----------------------

  Role4EC2:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies: # INLINE POLICY, What is this role allowed to access? 
        - PolicyName: ec2-gets-s3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:GetObject' # what you can do 
                Resource: 'arn:aws:s3:::files4ec2access/*' # which bucket to access
  InstanceProfile: # EC2 specific -- THIS IS THE WAY WE ATTACH the role to the instance. 
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref Role4EC2


# ----------------- cfn-init ----------------------
  # VirtualMachine:
  #   Type: 'AWS::EC2::Instance'
  #   Metadata:
  #     'AWS::CloudFormation::Init':
  #       config:
  #        #file
  #   Properties:
  #     #[...]
      


# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-authentication.html#aws-resource-authentication-examples
#   MyInstance: 
#     Type: AWS::EC2::Instance # private instance
#     Metadata:
#      # AWS::CloudFormation::Authentication: 
# # 				S3Auth: 
# # 					type: "S3"
# # 					buckets: 
# # 						- "myBucket"
# # 					roleName: 
# # 						Ref: "myRole"
#       AWS::CloudFormation::Init: 
#         config: 
#           files:
# 						"/jetsonsKitchen.jpg":
# 							source: https://files4ec2access.s3-us-west-2.amazonaws.com/jetsonsKitchen.jpg
# 							# authentication: "S3Auth"
#     Properties:
# 		 #[...] 
# 			UserData:
# 			'Fn::Base64': !Sub |
# 			#!/usr/bin/env bash
# 			/opt/aws/bin/cfn-init -v --resource MyInstance --region ${AWS::Region} --stack ${AWS::StackName}
        


# /opt/aws/bin/cfn-init -v --resource VirtualMachine --region us-west-2 --stack ${nameofstack}
# ----------------- STRETCH GOAL ---- S3 Bucket creation ----------------------
# https://s3.console.aws.amazon.com/s3/home?region=us-west-2#

# Bucket Name: files4ec2access

# Resources: # Always either making an obj or list item. 
#   MyS3Bucket: # creating a bucket with CloudFormation
#     Type: AWS::S3::Bucket 
#     Properties:
#       BucketName: julie-bucket-cloud-f
#       AccessControl: PublicRead
#       WebsiteConfiguration:
#         IndexDocument: index.html